#+TITLE: Emacs configuration file
#+AUTHOR: Ryan Cummings
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+STARTUP: overview
* Intro
Welcome to my config! Feel free to borrow anything you like. Quick tips below:
- To edit a source block, it is best to pop open a code editor with =C-c '=
* Todos
** TODO Prevent emacs from generating config.el file when loading
* Bootstrap
** Package Management

This config depends on use-package to manage packages.
Install use-package if not installed.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)
  
  ;; Select the folder to store packages
  ;; Comment / Uncomment to use desired sites
  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory)
        package-archives
        '(("gnu"   . "http://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ;; ("cselpa" . "https://elpa.thecybershadow.net/packages/")
          ;; ("melpa-cn" . "http://mirrors.cloud.tencent.com/elpa/melpa/")
          ;; ("gnu-cn"   . "http://mirrors.cloud.tencent.com/elpa/gnu/")
          ))
  
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  
  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t)
    (setq use-package-enable-imenu-support t))
#+END_SRC

** Shell
https://github.com/purcell/exec-path-from-shell
exec-path-from-shell makes sure Emacs shell works like the system shell, which is especially important on OSX
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :if (memq window-system '(mac ns x))
  :config
  (setq exec-path-from-shell-variables '("PATH" "GOPATH"))
  (exec-path-from-shell-initialize))
#+END_SRC
** Constants
#+BEGIN_SRC emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python*
  (executable-find "python")
  "Do we have python?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *tr*
  (executable-find "tr")
  "Do we have tr?")

(defconst *mvn*
  (executable-find "mvn")
  "Do we have Maven?")

(defconst *clangd*
  (or (executable-find "clangd")  ;; usually
      (executable-find "/usr/local/opt/llvm/bin/clangd"))  ;; macOS
  "Do we have clangd?")

(defconst *gcc*
  (executable-find "gcc")
  "Do we have gcc?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")

(defconst *eaf-env*
  (and *sys/linux* *sys/gui* *python3*
       (executable-find "pip")
       (not (equal (shell-command-to-string "pip freeze | grep '^PyQt\\|PyQtWebEngine'") "")))
  "Check basic requirements for EAF to run.")
#+END_SRC
** Bindings
#+BEGIN_SRC emacs-lisp
;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "M-/") nil)
;; Use iBuffer instead of Buffer List
(global-set-key (kbd "C-x C-b") #'ibuffer)
;; Truncate lines
(global-set-key (kbd "C-x C-l") #'toggle-truncate-lines)
;; Adjust font size like web browsers
(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)
;; Move up/down paragraph
(global-set-key (kbd "M-n") #'forward-paragraph)
(global-set-key (kbd "M-p") #'backward-paragraph)
#+END_SRC

** Use better defaults

Here are what I consider better defaults as per my own experience.

#+BEGIN_SRC emacs-lisp
  (setq-default
   cursor-type 'bar                                 ; Prefer a bar-shaped cursor
   fill-column 80                                   ; Set width for automatic line breaks
   gc-cons-threshold (* 8 1024 1024)                ; We're not using Game Boys anymore
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Stop using tabs to indent
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   recenter-positions '(5 top bottom)               ; Set re-centering positions
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-margin 2                                  ; Add a margin when scrolling vertically
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                    ; Use a single space after dots
   show-help-function nil                           ; Disable help text everywhere
   tab-width 4                                      ; Set width for tabs
   uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   window-divider-default-right-width 1             ; Thin window vertical dividers
   x-stretch-cursor t                               ; Stretch cursor to the glyph width
   echo-keystrokes 0.1                              ; Immediately show keystrokes
   frame-title-format '("Emacs - " user-login-name "@" system-name " - %b") ; Better title name
  )
  (cd "~/")                                         ; Move to the user directory
  (delete-selection-mode 1)                         ; Replace region when inserting text
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  (menu-bar-mode 0)                                 ; Disable the menu bar
  (mouse-avoidance-mode 'exile)                     ; Avoid collision of mouse with point
#+END_SRC

Some UI elements are rather invasive. No-mouse master race.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (blink-cursor-mode 0)                           ; Disable the cursor blinking
    (scroll-bar-mode 0)                             ; Disable the scroll bar
    (tool-bar-mode 0)                               ; Disable the tool bar
    (tooltip-mode 0)                                ; Disable the tooltips
    (global-hl-line-mode 1)                         ; Enable line highlighting globally
    )
#+END_SRC

Garbage-collect on focus-out, Emacs /should/ feel snappier overall.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC
** Load =.custom.el=

One is able to use the customization interface that is bundled within Emacs. It
is meant to help people who are not familiar with Emacs Lisp in the
configuration of Emacs itself. By default, changes in the customization will be
automatically detected and appended at the end of the configuration file,
=init.el=.

Since that in my case, the actual configuration file is a new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The
following tells Emacs to add extra code in another file that would be then
loaded, if existing.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(load custom-file t)
#+END_SRC

** Load =.secret.el=

I load =~/.emacs.d/.secret.el= to keep sensible things out of version control.
For instance, you could set your identity by customizing both =user-full-name=
and =user-mail-address=. This is also where you want your API tokens to live.

#+BEGIN_SRC emacs-lisp
(defvar me/erc-nick           nil                 "The ERC nick to use.")
(defvar me/erc-password       nil                 "The ERC password to use.")
(defvar me/erc-port           nil                 "The ERC port to use.")
(defvar me/erc-server         nil                 "The ERC server to use.")
(defvar me/font-family        "Source Code Pro"            "The font to use.")
(defvar me/font-size-default  100                 "The font size to use for default text.")
(defvar me/font-size-large    1.2                 "The font size to use for larger text.")
(defvar me/font-size-small    .8                  "The font size to use for smaller text.")

(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (load secret.el t))
#+END_SRC

#+RESULTS:

** Theme

| =doom-themes= | https://github.com/hlissner/emacs-doom-themes |

Load the theme and fix some faces to match my personal preferences.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
  
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

* Features
** Avy

[[https://github.com/abo-abo/avyAvy][Avy]] provides a nice way to navigate text

#+BEGIN_SRC emacs-lisp
(use-package avy
  :defer t
  :bind
  (("C-z c" . avy-goto-char-timer)
   ("C-z l" . avy-goto-line))
  :custom
  (avy-timeout-seconds 0.3)
  (avy-style 'pre)
  :custom-face
  (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))));
#+END_SRC
** CRUX (Collection of Rediculously Useful eXtensions)

This provides some small helpful features
#+BEGIN_SRC emacs-lisp
(use-package crux
  :bind
  (([remap move-beginning-of-line] . crux-move-beginning-of-line)
   ("C-x 4 t" . crux-transpose-windows)
   ("C-x K" . crux-kill-other-buffers)
   ("C-k" . crux-smart-kill-line))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+END_SRC
** Completion Frameworks

*** Vertico
Provides the backbone vertical completion list used by the various completion modules to follow.
#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

#+END_SRC

*** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

*** Marginalia
#+BEGIN_SRC emacs-lisp
  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    :init
    (marginalia-mode))
#+END_SRC
*** Consult
#+BEGIN_SRC emacs-lisp
    ;; Use Consult for completion selection
    (use-package consult
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :bind (;; C-c bindings (mode-specific-map)
             ("C-c h" . consult-history)
             ("C-c m" . consult-mode-command)
             ("C-c b" . consult-bookmark)
             ("C-c k" . consult-kmacro)
             ;; C-x bindings (ctl-x-map)
             ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
             ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
             ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
             ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
             ;; Custom M-# bindings for fast register access
             ("M-#" . consult-register-load)
             ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
             ("C-M-#" . consult-register)
             ;; Other custom bindings
             ("M-y" . consult-yank-pop)                ;; orig. yank-pop
             ("<help> a" . consult-apropos)            ;; orig. apropos-command
             ;; M-g bindings (goto-map)
             ("M-g e" . consult-compile-error)
             ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
             ("M-g g" . consult-goto-line)             ;; orig. goto-line
             ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
             ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
             ("M-g m" . consult-mark)
             ("M-g k" . consult-global-mark)
             ("M-g i" . consult-imenu)
             ("M-g I" . consult-imenu-multi)
             ;; M-s bindings (search-map)
             ("M-s f" . consult-find)
             ("M-s F" . consult-locate)
             ("M-s g" . consult-grep)
             ("M-s G" . consult-git-grep)
             ("M-s r" . consult-ripgrep)
             ("M-s l" . consult-line)
             ("C-s" . consult-line)
             ("M-s L" . consult-line-multi)
             ("M-s m" . consult-multi-occur)
             ("M-s k" . consult-keep-lines)
             ("M-s u" . consult-focus-lines)
             ;; Isearch integration
             ("M-s e" . consult-isearch-history)
             :map isearch-mode-map
             ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
             ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
             ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
             ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch


      ;; The :init configuration is always executed (Not lazy)
      :init

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Optionally replace `completing-read-multiple' with an enhanced version.
      ; (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)

      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :config

      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<") ;; (kbd "C-+")

      ;; Optionally make narrowing help available in the minibuffer.
      ;; You may want to use `embark-prefix-help-command' or which-key instead.
      ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)
    )

    ;; Turn on recentf-mode to pick recent files in buffer switcher
    (recentf-mode 1)
    (setq recentf-max-menu-items 50)
    (setq recentf-max-saved-items 50)
#+END_SRC

** Color Ripgrep

*Prerequisite*: Please install [[https://github.com/BurntSushi/ripgrep#installation][ripgrep]] and ensure =rg= is in the =PATH=.
Ripgrep-based search and refactoring tool. MANDATORY: install ripgrep!
#+BEGIN_SRC emacs-lisp
  (use-package color-rg
    :load-path (lambda () (expand-file-name "site-elisp/color-rg" user-emacs-directory))
    :if *rg*
    :bind ("C-M-s" . color-rg-search-input))
#+END_SRC

** Which Key
Display key bindings following an incomplete command
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-mode))
#+END_SRC

** Popup kill ring
Browse the emacs kill ring in autocomplete style popup
#+BEGIN_SRC emacs-lisp
(use-package popup-kill-ring
  :bind ("M-y" . popup-kill-ring))
#+END_SRC

** Ace Window
Quick select windows to switch to
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window))
(global-set-key (kbd "M-o") 'other-window)
#+END_SRC
** Custom resize functions
Custom functions to resize windows in a frame

#+BEGIN_SRC emacs-lisp
;; Resizes the window width based on the input
(defun resize-window-width (w)
  "Resizes the window width based on W."
  (interactive (list (if (> (count-windows) 1)
                         (read-number "Set the current window width in [1~9]x10%: ")
                       (error "You need more than 1 window to execute this function!"))))
  (message "%s" w)
  (window-resize nil (- (truncate (* (/ w 10.0) (frame-width))) (window-total-width)) t))

;; Resizes the window height based on the input
(defun resize-window-height (h)
  "Resizes the window height based on H."
  (interactive (list (if (> (count-windows) 1)
                         (read-number "Set the current window height in [1~9]x10%: ")
                       (error "You need more than 1 window to execute this function!"))))
  (message "%s" h)
  (window-resize nil (- (truncate (* (/ h 10.0) (frame-height))) (window-total-height)) nil))

;; Setup shorcuts for window resize width and height
(global-set-key (kbd "C-z w") #'resize-window-width)
(global-set-key (kbd "C-z h") #'resize-window-height)
#+END_SRC

** Sudo Edit
Quickly open a file with 'sudo'
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :commands (sudo-edit))
#+END_SRC
** Fonts
*** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :if *sys/gui*)
(use-package all-the-icons-dired
  :after all-the-icons
  :if *sys/gui*
  :diminish
  :custom-face
  (all-the-icons-dired-dir-face ((t `(:foreground ,(face-background 'default)))))
  :hook (dired-mode . all-the-icons-dired-mode)
  :config
  ;; Workaround for all-the-icons bug until PR merged https://github.com/domtronn/all-the-icons.el/pull/150
  (when (require 'all-the-icons nil 'noerror)
    (setq all-the-icons-mode-icon-alist
          (delete '(erc-mode all-the-icons-faicon "commenting-o" :height 1.0 :v-adjust 0.0 :face all-the-icons-white) all-the-icons-mode-icon-alist))
    (add-to-list 'all-the-icons-mode-icon-alist '(erc-mode all-the-icons-faicon "commenting-o" :height 1.0 :v-adjust 0.0))))
#+END_SRC

** Prettify symbols
Displays fancy characters/symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode 1)
(defun add-pretty-lambda ()
  "Make some word or string show as pretty Unicode symbols.  See https://unicodelookup.com for more."
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955)
          ("delta" . 120517)
          ("epsilon" . 120518)
          ("->" . 8594)
          ("<=" . 8804)
          (">=" . 8805)
          )))
(add-hook 'prog-mode-hook 'add-pretty-lambda)
(add-hook 'org-mode-hook 'add-pretty-lambda)
#+END_SRC
** Simple yes/no prompts
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Dimmer
Dims inactive windows
#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :config (dimmer-mode)
  :custom
  (set 'dimmer-fraction .4)
  )
#+END_SRC

** Point and Region / Expand

| =expand-region= | https://github.com/magnars/expand-region.el |

Increase region by semantic units. It tries to be smart about it and adapt to
the structure of the current major mode.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  ("C-." . er/expand-region))
#+END_SRC
** Auto-fill
I prefer visual-line-mode to auto-fill, especially in Org where auto-fill could break document structure. 
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :hook
    ;; (prog-mode . turn-on-auto-fill)
    ;; (text-mode . turn-on-auto-fill)
    (text-mode . visual-line-mode)
    )
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("s-p" . projectile-command-map)
                ("C-c p" . projectile-command-map)))
#+END_SRC
** IBuffer
- Set up ibuffer filters here.
- One for Dired to kill all dired buffers.
#+BEGIN_SRC emacs-lisp
(setq-default ibuffer-saved-filter-groups
              `(("Default"
                 ;; I create a group call Dired, which contains all buffer in dired-mode
                 ("Dired" (mode . dired-mode))
                 ("Temporary" (name . "\*.*\*"))
                 )))
#+END_SRC
** TRAMP
- Sometimes you want to jump multiple proxies to your destination. To access other devices on the local network, run all TRAMP traffic through my tunnel. 
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (add-to-list 'tramp-default-proxies-alist
               '("192.168.1.24" nil "/ssh:kubo@ryanwcummings.com#443:"))

#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :bind
    ("C-c y s" . yas-insert-snippet)
    ("C-c y v" . yas-visit-snippet-file)
    ("C-;" . yas-expand)
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-global-mode 1))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    ; :init (global-flycheck-mode)
  )
#+END_SRC
** Custom functions 
*** Orgzly conflict resolution
#+BEGIN_SRC emacs-lisp
  (defun my/resolve-orgzly-syncthing ()
    (interactive)
    (ibizaman/syncthing-resolve-conflicts "~/org"))

  (defun ibizaman/syncthing-resolve-conflicts (directory)
    "Resolve all conflicts under given DIRECTORY."
    (interactive "D")
    (let* ((all (ibizaman/syncthing--get-sync-conflicts directory))
          (chosen (ibizaman/syncthing--pick-a-conflict all)))
      (ibizaman/syncthing-resolve-conflict chosen)))

  (defun ibizaman/syncthing-show-conflicts-dired (directory)
    "Open dired buffer at DIRECTORY showing all syncthing conflicts."
    (interactive "D")
    (find-name-dired directory "*.sync-conflict-*"))

  (defun ibizaman/syncthing-resolve-conflict-dired (&optional arg)
    "Resolve conflict of first marked file in dired or close to point with ARG."
    (interactive "P")
    (let ((chosen (car (dired-get-marked-files nil arg))))
      (ibizaman/syncthing-resolve-conflict chosen)))

  (defun ibizaman/syncthing-resolve-conflict (conflict)
    "Resolve CONFLICT file using ediff."
    (let* ((normal (ibizaman/syncthing--get-normal-filename conflict)))
      (ibizaman/ediff-files
       (list conflict normal)
       `(lambda ()
         (when (y-or-n-p "Delete conflict file? ")
           (kill-buffer (get-file-buffer ,conflict))
           (delete-file ,conflict))))))

  (defun ibizaman/syncthing--get-sync-conflicts (directory)
    "Return a list of all sync conflict files in a DIRECTORY."
    (directory-files-recursively directory "\\.sync-conflict-"))

  (defvar ibizaman/syncthing--conflict-history nil 
    "Completion conflict history")

  (defun ibizaman/syncthing--pick-a-conflict (conflicts)
    "Let user choose the next conflict from CONFLICTS to investigate."
    (completing-read "Choose the conflict to investigate: " conflicts
                     nil t nil ibizaman/syncthing--conflict-history))


  (defun ibizaman/syncthing--get-normal-filename (conflict)
    "Get non-conflict filename matching the given CONFLICT."
    (replace-regexp-in-string "\\.sync-conflict-.*\\(\\..*\\)$" "\\1" conflict))


  (defun ibizaman/ediff-files (&optional files quit-hook)
    (interactive)
    (eval-when-compile (require 'cl-lib))
    (lexical-let ((files (or files (dired-get-marked-files)))
                  (quit-hook quit-hook)
                  (wnd (current-window-configuration)))
      (if (<= (length files) 2)
          (let ((file1 (car files))
                (file2 (if (cdr files)
                           (cadr files)
                         (read-file-name
                          "file: "
                          (dired-dwim-target-directory)))))
            (if (file-newer-than-file-p file1 file2)
                (ediff-files file2 file1)
              (ediff-files file1 file2))
            (add-hook 'ediff-after-quit-hook-internal
                      (lambda ()
                        (setq ediff-after-quit-hook-internal nil)
                        (when quit-hook (funcall quit-hook))
                        (set-window-configuration wnd))))
        (error "no more than 2 files should be marked"))))
#+END_SRC

#+RESULTS:
: ibizaman/ediff-files

* Programming
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :if *git*
  :bind ("C-x g" . magit-status))
#+END_SRC

** Treemacs
File tree mode for project management. 

#+BEGIN_SRC emacs-lisp
(use-package treemacs)
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    ;; Stop pairing single quotes in elisp
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-mode "'" nil :actions nil)
    (sp-local-pair 'emacs-lisp-mode "`" nil :actions nil)
    (sp-local-pair 'lisp-mode "`" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil)

    ;; Show matching parenthesis
    (show-paren-mode 1)
    )
#+END_SRC
** Rainbow Parens
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Line Numbers
#+BEGIN_SRC emacs-lisp
  ;; Hook line numbers to only when files are opened, also use linum-mode for emacs-version< 26
  ;; (if (version< emacs-version "26")
  ;;     (global-linum-mode)
  ;; (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (defun nolinum ()
       (global-linum-mode 0)
       )
  (add-hook 'org-mode-hook 'nolinum)
  ;; Display column numbers in modeline
  (column-number-mode 1)
#+END_SRC
** LSP
Language Server support for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+END_SRC

** Languages
*** Python
**** Pipenv
#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))
#+END_SRC

*** AHK
#+BEGIN_SRC emacs-lisp
  (use-package ahk-mode
    :ensure t
    )
#+END_SRC
* Org
** Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :init
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c C-n" . org-next-visible-heading)
    ("C-c ." . org-time-stamp-inactive)

    :custom
    (org-startup-indented t)
    ;; ORG Directories
    (org-directory "~/org")
    ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
    (org-capture-templates
     (quote (("t" "Todo" entry (file "~/org/inbox.org")
              "* TODO %?\n" :kill-buffer t
              )
             ("r" "Repeating Todo" entry (file+headline "~/org/schedule.org" "Tasks")
                "* TODO %?\nSCHEDULED: %^t" :kill-buffer t
                )
             ("h" "Habit" entry (file+headline "~/org/habits.org" "Habits")
                "* TODO %?\nSCHEDULED: %^t\n:PROPERTIES:\n:STYLE: habit\n:END:" :kill-buffer t
                )
             ("T" "Tickler (reminder)" entry (file+headline "~/org/schedule.org" "Tickler")
              "* TODO %?\nSCHEDULED: %^t" :kill-buffer t)
             ("m" "Meeting" entry (file+headline "~/org/schedule.org" "Meetings")
              "* %?\n%^t" :kill-buffer t)
             ("g" "Groceries" item (file+headline "~/org/gtd.org" "Groceries")
              "- %?\n")
             ("b" "Buy" entry (file+headline "~/org/gtd.org" "Shopping inbox")
              "- %?\n")
             ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
              "* %?\n%U\n")
             ("p" "Programming Log" entry (file+olp+datetree "~/org/technical_notebook.org" "Programming Log")
              "* %?\n%u")
             ("l" "Lecture/Conference" entry (file+headline "~/org/radiology.org" "Inbox")
              "* %?\n%U")
             ("a" "Affirmations" entry (file "~/org/affirmations.org")
              "* %? :Affirmation:" :kill-buffer t
              )
             ("i" "Interesting Case" entry (file+headline "~/org/radiology.org" "Interesting cases")
              "* %^{description} :%^{specialty|msk|body|neuro|peds|chest|ir|breast}:%^{hospital|nyu|bellevue}:\n%u\nMRN: %^{mrn}\nModality: %^{modality|mri|ct|ultrasound|xray|nuclear|mammo|fluoro}\nNotes:\n- %^{Age and sex?}\n- %?" :kill-buffer t
              )
             ("s" "Slipbox" entry  (file "~/org/Eva/inbox.org")
              "* %?\n")
             )))
    (org-log-done 'time)
    (add-hook 'org-mode-hook 'org-align-all-tags)
    (org-export-backends (quote (ascii html icalendar latex md odt)))
    (org-use-speed-commands t)
    (org-confirm-babel-evaluate 'nil)
    (org-todo-keywords
     '((sequence "TODO(t)" "|" "DONE(d)")
       (sequence "NEXT(n)" "WAITING(w)" "INACTIVE(i)" "|" "CANCELLED(c)")))
    (org-todo-keyword-faces
     '(("DONE" . "green")
       ("CANCELLED" . "green")
       ("WAITING" . "teal")
       ("INACTIVE" . "red")
       ("NEXT" . "orange")
       ))
    (org-agenda-files
     (quote
      ("~/org/inbox.org" "~/org/gtd.org" "~/org/schedule.org" "~/org/habits.org" "~/org/journal.org" "~/org/affirmations.org" "~/org/radiology.org")))
    (org-agenda-window-setup 'current-window)
    (org-refile-targets '((nil :maxlevel . 5)
                          (org-agenda-files :maxlevel . 5)))
    (org-outline-path-complete-in-steps nil)         ; Refile in a single go
    (org-refile-use-outline-path nil)                  ; Show full paths for refiling

    ;; Allow refile to create parent tasks with confirmation
    (org-refile-allow-creating-parent-nodes (quote confirm))
    ;; (org-ellipsis "⤵")
    (org-ellipsis "...")

    ;; Set default column view headings: Task Total-Time Time-Stamp
    (org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")

    (org-agenda-custom-commands
     '(("d" "Daily agenda and all TODOs"
        ((tags "Affirmation")
         (tags "PRIORITY=\"A\""
               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "High-priority unfinished tasks:")))
         ;; Number of days to show in agenda: 1 shows only today
         (agenda "" ((org-agenda-span 1)))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Steps:")))
         (todo "WAITING"
               ((org-agenda-overriding-header "Waiting:")))
         (tags-todo "-PROJ"
                    ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                    (air-org-skip-subtree-if-priority ?A)
                                                    (org-agenda-skip-if nil '(scheduled deadline))))
                     (org-agenda-overriding-header "ALL normal priority non-project tasks:"))))
        ((org-agenda-compact-blocks t)))))

    :config
    (require 'org-habit)

    (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.
    PRIORITY may be one of the characters ?A, ?B, or ?C.
    Air is a namespace prefix to ensure uniqueness"
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
            subtree-end
          nil)))
    ;; For custom agenda per https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
    (defun air-org-skip-subtree-if-habit ()
      "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (if (string= (org-entry-get nil "STYLE") "habit")
            subtree-end
          nil)))

    (defun org-export-turn-on-syntax-highlight ()
      "Setup variables to turn on syntax highlighting when calling `org-latex-export-to-pdf'."
      (interactive)
      (setq org-latex-listings 'minted
            org-latex-packages-alist '(("" "minted")))))

#+END_SRC
** Org-Download
Drag-and-drop into org mode (especially useful for pics)
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :ensure t
    :config
    ;; Add handlers for drag-and-drop when Org is loaded.
    (with-eval-after-load 'org
      (org-download-enable))
    (setq-default org-download-image-dir "~/org/Eva/media")
    (setq org-image-actual-width nil)
    ; Experimental custom code to add resizing to link annotation 
    (defun ryan/org-download-annotate-resize (link)
      "Annotate LINK with the time of download and with resizing code"
      (format "#+DOWNLOADED: %s @ %s\n#+attr_html: :width 80%%\n"
              (if (equal link org-download-screenshot-file)
                  "screenshot"
                link)
              (format-time-string "%Y-%m-%d %H:%M:%S")))
    (setq org-download-annotate-function #'ryan/org-download-annotate-resize)
    )


#+END_SRC

** Olivetti Mode
A nice mode for distraction-free writing.
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :ensure t)
#+END_SRC

** Org-Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (require 'consult)
    (org-roam-directory (file-truename "/home/kubo/org/Eva/"))
    (org-roam-capture-templates
     '(("m" "main note" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :main:\n")
        :unnarrowed t)
       ("t" "technical note" plain
          "%?"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :technical:\n")
          :unnarrowed t)
       ("s" "source/reference note" plain
        "\n* Source\nAuthor: %^{Author}\nTitle: ${title}\nType: %^{type of media|webpage|cwebpage|youtube|article|book}\nLink: %^{Link}\n* Summary\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :source:\n")
        :unnarrowed t)
       ("r" "radiology note" plain
          "%?"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :radiology:\n")
          :unnarrowed t)
       ))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n a" . org-roam-alias-add)
           ("C-c n o" . org-id-get-create) ; Get an ID for a heading or other org object
           ("C-c n t t" . org-roam-tag-add)
           ("C-c n t +" . org-roam-tag-add)
           ("C-c n t -" . org-roam-tag-remove)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    (defun ryan/tag-new-node-as-draft ()
      (org-roam-tag-add '("draft")))
    (add-hook 'org-roam-capture-new-node-hook #'ryan/tag-new-node-as-draft)
    )
#+END_SRC

** Org-Cite
#+BEGIN_SRC emacs-lisp
  (setq org-cite-global-bibliography '("/home/kubo/org/Eva/biblio.bib"))
  (setq org-cite-csl-styles-dir "~/Zotero/styles")
#+END_SRC

* LaTeX
** AUCTeX
An extensible latex editor. Requires Tex Live. 
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master nil)
  ;; to use pdfview with auctex
  (TeX-view-program-selection '((output-pdf "pdf-tools"))
                              TeX-source-correlate-start-server t)
  (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
  (TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  :hook
  (LaTeX-mode . (lambda ()
                  (turn-on-reftex)
                  (setq reftex-plug-into-AUCTeX t)
                  (reftex-isearch-minor-mode)
                  (setq TeX-PDF-mode t)
                  (setq TeX-source-correlate-method 'synctex)
                  (setq TeX-source-correlate-start-server t)))
  :config
  (when (version< emacs-version "26")
    (add-hook LaTeX-mode-hook #'display-line-numbers-mode)))
#+END_SRC
* Final load
#+BEGIN_SRC emacs-lisp
(find-file "~/org/gtd.org")
#+END_SRC
